
namespace ShapeProgram.Data
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using System.Threading.Tasks;

    public abstract class Shape
    {
        protected double _width;
        protected double _height;

        public virtual double CalculateSurface()
        {
            return _width * _height;
        }
        
        public abstract double Width
        {
            get;
            set;
        }

        public abstract double Height
        {
            get;
            set;
        }
    }
}
class Triangle : Shape
    {
        public Triangle()
        {
            _height = double.MinValue;
            _width = double.MinValue;
        }

        public Triangle(double height, double width)
        {
            _height = height;
            _width = width;
        }

        public override double Height
        {
            get
            {
                return _height;
            }
            set
            {
                if (value < 1)
                {
                    throw new ArgumentException("Height can't be under 1!");
                }
                _height = value;
            }
        }

        public override double Width
        {
            get
            {
                return _width;
            }
            set
            {
                if (value < 1)
                {
                    throw new ArgumentException("Width can't be under 1!");
                }
                _width = value;
            }
        }

        public override double CalculateSurface()
        {
            return ( (_height * _width) / 2 );
        }
    }
}

  class Circle : Shape
    {
        private double radius;
        public Circle()
        {
            _height = double.MinValue;
            _width = double.MinValue;
        }

        public Circle(double height, double width)
        {
            _height = height;
            _width = width;
        }

        public override double Height
        {
            get { return _height; }
            set 
            {
                if (value != _width)
                {
                    throw new ArgumentException("Height and Width must be the same!");
                }
                _height = value;
            }
        }

        public override double Width
        {
            get
            {
                return _width;
            }
            set
            {
                if (value != _height)
                {
                    throw new ArgumentException("Width and Height must be the same!");
                }
                _width = value;
            }
        }

        public override double CalculateSurface()
        {
            double result = Math.PI * (_height * _width);
            return result;
        }
    }
}
class Rectangle : Shape
    {
        public Rectangle()
        {
            _height = double.MinValue;
            _width = double.MinValue;
        }

        public Rectangle(double height, double width)
        {
            _height = height;
            _width = width;
        }

        public override double Height
        {
            get
            {
                return _height;
            }
            set
            {
                if (value < 1)
                {
                    throw new ArgumentException("Height can't be under 1!");
                }
                _height = value;
            }
        }

        public override double Width
        {
            get
            {
                return _width;
            }
            set
            {
                if (value < 1)
                {
                    throw new ArgumentException("Width can't be under 1!");
                }
            }
        }

        public override double CalculateSurface()
        {
            return (_height * _width);
        }
    }
}

public class Program
{
    public static void Main ()
    {
        Triangle tri = new Triangle ();
        Rectangle rect = new Rectangle ();
        Circle cir = new Circle (10, 10);
        tri.Circle = (10,4);
        rect. Circle = (10,4);
    }
    Console.WriteLine ("The surface area of triangle is {0}", tri.CalculateSurface() );
    
    Console.WriteLine ("The Area of rectangle is {0}", rect.CalculateSurface());
    
    Console.ReadLine();
}

